from typing import Annotated
from fastapi import APIRouter, Depends
from fastapi.responses import Response
from setezor.dependencies.project import get_current_project, role_required, get_current_scan_id
from setezor.services import L4VulnerabilityService
from setezor.schemas.roles import Roles

router = APIRouter(
    prefix="/l4-vulnerability",
    tags=["Resource Vulnerability"],
)

@router.put("/{id}/confirm")
async def set_status(
    l4_vulnerability_service: Annotated[L4VulnerabilityService, Depends(L4VulnerabilityService.new_instance)],
    id: str,
    data: dict,
    project_id: str = Depends(get_current_project),
    _: bool = Depends(role_required([Roles.owner, Roles.executor]))
) -> bool:
    return await l4_vulnerability_service.set_status(project_id=project_id, id=id, status=data['status'])


@router.get("/{vuln_id}/screenshots")
async def get_screenshots(
    l4_vulnerability_service: Annotated[L4VulnerabilityService, Depends(L4VulnerabilityService.new_instance)],
    vuln_id: str,
    scan_id: str = Depends(get_current_scan_id),
    project_id: str = Depends(get_current_project),
    _: bool = Depends(role_required([Roles.owner, Roles.executor]))
) -> list:
    screenshots = await l4_vulnerability_service.get_screenshots(project_id=project_id, scan_id=scan_id, vuln_id=vuln_id)
    return screenshots


@router.post("/{vuln_id}/screenshots")
async def add_screenshot(
    l4_vulnerability_service: Annotated[L4VulnerabilityService, Depends(L4VulnerabilityService.new_instance)],
    vuln_id: str,
    data: dict,
    scan_id: str = Depends(get_current_scan_id),
    project_id: str = Depends(get_current_project),
    _: bool = Depends(role_required([Roles.owner, Roles.executor]))
) -> int:
    count_screenshots = await l4_vulnerability_service.add_screenshot(project_id=project_id, scan_id=scan_id, vuln_id=vuln_id, data=data)
    return count_screenshots


@router.delete("/{id}/screenshots")
async def delete_screenshot(
    l4_vulnerability_service: Annotated[L4VulnerabilityService, Depends(L4VulnerabilityService.new_instance)],
    id: str,
    scan_id: str = Depends(get_current_scan_id),
    project_id: str = Depends(get_current_project),
    _: bool = Depends(role_required([Roles.owner, Roles.executor]))
) -> int:
    count_screenshots = await l4_vulnerability_service.delete_screenshot(project_id=project_id, scan_id=scan_id, id=id)
    return count_screenshots


@router.get("/get-screenshot/{id}")
async def get_screenshot(
    l4_vulnerability_service: Annotated[L4VulnerabilityService, Depends(L4VulnerabilityService.new_instance)],
    id: str,
    scan_id: str = Depends(get_current_scan_id),
    project_id: str = Depends(get_current_project),
    _: bool = Depends(role_required([Roles.owner, Roles.executor]))
) -> Response:
    file = await l4_vulnerability_service.get_screenshot(project_id=project_id, scan_id=scan_id, id=id)
    return Response(content=file, media_type="image/png")