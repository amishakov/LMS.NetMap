from aiohttp.web import Request, Response, json_response
from setezor.app_routes.session import project_require, get_db_by_session, get_project
from setezor.app_routes.api.base_web_view import BaseView
from setezor.modules.application import PMRequest
from base64 import b64decode
import os
import uuid


class ResourceVulnerabilityView(BaseView):
    endpoint = '/resource-vulnerability'
    queries_path = 'resource-vulnerability'

    @BaseView.route('PUT', '/{id}/confirm')
    @project_require
    async def confirm_resource_vulnerability(self, request: PMRequest):
        resource_vuln_id = int(request.match_info.get('id'))
        body = await request.json()
        status = body.get("status")
        db = await get_db_by_session(request=request)
        db.vuln_res_soft.set_confirm(id=resource_vuln_id, status=status)
        return json_response(status=200, data=status)

    @BaseView.route('GET', '/{id}/screenshots')
    @project_require
    async def get_screenshots(self, request: PMRequest):
        resource_vuln_id = int(request.match_info.get('id'))
        db = await get_db_by_session(request=request)
        screenshots = db.vuln_res_soft.get_screenshots(
            resource_vuln_id=resource_vuln_id)
        result = []
        for screenshot in screenshots:
            result.append(
                {
                    "id": screenshot.id,
                    "note": screenshot.note,
                    "path": screenshot.path,
                }
            )
        return json_response(status=200, data=result)

    @BaseView.route('POST', '/{id}/screenshots')
    @project_require
    async def add_screenshot(self, request: PMRequest):
        resource_vuln_id = int(request.match_info.get('id'))
        project = await get_project(request)
        resp = await request.json()
        screenshot = resp.pop('file')
        filename = resp.pop('filename')
        filename = uuid.uuid4().hex + os.path.splitext(filename)[1]
        note = resp.pop('note')
        data = b64decode(screenshot.split(',')[1])
        path = os.path.join(project.configs.folders.vulnerability_screenshots_folder, filename)
        with open(path, 'wb') as file:
            file.write(data)
        db = await get_db_by_session(request=request)
        db.vuln_res_soft.save_screenshot(resource_vuln_id=resource_vuln_id, note=note, path=path)
        screenshots_cnt = len(db.vuln_res_soft.get_screenshots(resource_vuln_id = resource_vuln_id))
        return json_response(status=200,data = screenshots_cnt)
