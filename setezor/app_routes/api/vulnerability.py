from aiohttp.web import Request, Response, json_response
from setezor.app_routes.session import project_require, get_db_by_session, get_project
from setezor.app_routes.api.base_web_view import BaseView
from setezor.modules.application import PMRequest
from setezor.modules.search_vulns.search_vulns import SearchVulns
try:
    from cpeguess.cpeguess import CPEGuess
except:
    pass

class VulnerabilityView(BaseView):
    endpoint = '/vulnerability'
    queries_path = 'vulnerability'

    @BaseView.route('GET', '/cpe/')
    @project_require
    async def get_cpe_by_name_and_version(self, request: PMRequest) -> Response:
        """Метод получения cpe по product/vendor + version

        Args:
            request (Request): объект http запроса

        Returns:
            Response: json ответ
        """
        query = request.query
        product, vendor, version, exact = query.get("product", ""), \
                                          query.get("vendor", ""), \
                                          query.get("version", ""), \
                                          query.get("mode","off") == "on"
        guesser = CPEGuess.search(
            product=product, vendor=vendor, version=version, exact=exact)
        return json_response(status=200, data=guesser)

    @BaseView.route('PUT', '/search_vulns/token/')
    @project_require
    async def set_search_vulns_token(self, request: PMRequest) -> Response:
        project = await get_project(request=request)
        payload = await request.json()
        new_token = payload.get("token")
        if not (await SearchVulns.check_token(token=new_token)):
            return json_response(status=500, data={"error": "Invalid token"})
        project.configs.variables.search_vulns_token = new_token
        project.configs.save_config_file()
        return json_response(status=200)

    @BaseView.route('GET', '/search_vulns/')
    @project_require
    async def search_vulns(self, request: PMRequest) -> Response:
        """Метод получения cpe по product/vendor + version

        Args:
            request (Request): объект http запроса

        Returns:
            Response: json ответ
        """
        project = await get_project(request=request)
        query = request.query
        query_string = query["query"]
        if not (token := project.configs.variables.search_vulns_token):
            return json_response(status=500, data={"error": "No token provided"})
        result = await SearchVulns.find(token=token, query_string=query_string)

        for k in result.keys():
            data = result.get(k, [])
            vulns = data.get("vulns")
            result_vulns = dict()
            for key in vulns.keys():
                if vulns[key].get("exploits"):
                    result_vulns.update({key: vulns[key]})
            data["vulns"] = result_vulns
        return json_response(status=200, data=result)
