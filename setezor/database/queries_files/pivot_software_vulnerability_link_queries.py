from pandas.core.api import DataFrame as DataFrame
from sqlalchemy.orm.session import Session
from sqlalchemy import Column, select, func

from ..models import Software, Resource_Software, Vulnerability_Resource_Soft, Vulnerability, VulnerabilityLink
from .base_queries import QueryFilter
from .base_queries import BaseQueries
from sqlalchemy import desc


def get_str(value):
    '''Возвращает строку, если None, то возвращает пустую строку'''

    if value:
        return str(value)
    else:
        return ''


PIVOT_DOMAIN_IP_COLUMNS = [
    Column(name='id'),
    Column(name='vendor'),
    Column(name='product'),
    Column(name='type'),
    Column(name='version'),
    Column(name='build'),
    Column(name='patch'),
    Column(name='platform'),
    Column(name='cpe23'),
    Column(name='name'),
    Column(name='cve'),
    Column(name='cwe'),
    Column(name='link'),
]


class SoftwareVulnerabilityLinkModel:
    __name__ = 'pivot_software_vulnerability_link'

    @classmethod
    def get_name(cls):
        return "Soft_Vuln_Link"

    def get_headers_for_table(self):
        return [
            {'field': 'id', 'title': 'ID'},
            {'field': 'vendor', 'title': 'VENDOR'},
            {'field': 'product', 'title': 'PRODUCT'},
            {'field': 'type', 'title': 'TYPE'},
            {'field': 'version', 'title': 'VERSION'},
            {'field': 'build', 'title': 'BUILD'},
            {'field': 'patch', 'title': 'PATCH'},
            {'field': 'platform', 'title': 'PLATFORM'},
            {'field': 'cpe23', 'title': 'CPE23'},
            {'field': 'name', 'title': 'VULN_NAME'},
            {'field': 'cve', 'title': 'CVE'},
            {'field': 'cwe', 'title': 'CWE'},
            {'field': 'link', 'title': 'LINK'},
        ]


class PivotSoftwareVulnerabilityLink(BaseQueries):
    """Класс запросов к таблице MAC адресов
    """

    model = SoftwareVulnerabilityLinkModel()

    def __init__(self, session_maker: Session):
        """Инициализация объекта запросов

        Args:
            objects (ObjectQueries): объект запросов к таблице с объектами
            session_maker (Session): генератор сессий
        """
        super().__init__(session_maker)

    @BaseQueries.session_provide
    def create(self, session: Session, mac: str, obj=None, **kwargs):
        raise NotImplementedError()

    @BaseQueries.session_provide
    def get_records_count(self, session: Session):
        return session.query(func.count(Software.id)).scalar()

    def get_headers(self) -> list:
        return [
            {'field': 'id', 'title': 'ID'},
            {'field': 'vendor', 'title': 'VENDOR'},
            {'field': 'product', 'title': 'PRODUCT'},
            {'field': 'version', 'title': 'VERSION'},
            {'field': 'build', 'title': 'BUILD'},
            {'field': 'patch', 'title': 'PATCH'},
            {'field': 'platform', 'title': 'PLATFORM'},
            {'field': 'cpe23', 'title': 'CPE23'},
            {'field': 'name', 'title': 'VULN_NAME'},
            {'field': 'cve', 'title': 'CVE'},
            {'field': 'cwe', 'title': 'CWE'},
            {'field': 'link', 'title': 'LINK'},
        ]

    @BaseQueries.session_provide
    def get_all(self, session: Session, result_format: str = None,
                page: int = None, limit: int = None, sort_by: str = None,
                direction: str = None, filters: list[QueryFilter] = []) -> list[dict] | DataFrame:

        query = session.query(
            func.row_number().over().label('id'),
            Software.vendor.label("vendor"),
            Software.product.label("product"),
            Software.type.label("type"),
            Software.version.label("version"),
            Software.build.label("build"),
            Software.patch.label("patch"),
            Software.platform.label("platform"),
            Software.cpe23.label("cpe23"),
            Vulnerability.name.label("name"),
            Vulnerability.cve.label("cve"),
            Vulnerability.cwe.label("cwe"),
            VulnerabilityLink.link.label("link"),
            Software)\
            .join(Resource_Software, Software.id == Resource_Software.software_id)\
            .join(Vulnerability_Resource_Soft, Resource_Software.id == Vulnerability_Resource_Soft.resource_soft_id)\
            .join(Vulnerability, Vulnerability_Resource_Soft.vulnerability_id == Vulnerability.id)\
            .join(VulnerabilityLink, VulnerabilityLink.vulnerability_id == Vulnerability.id, isouter=True)

        res = self._get_all(session=session, source_query=query,
                            columns=PIVOT_DOMAIN_IP_COLUMNS,
                            result_format=result_format, page=page,
                            limit=limit, sort_by=sort_by, direction=direction,
                            filters=filters, model=self.model)
        result = []
        for i in res:
            record = {
                'id': i[0],
                'vendor': i[1],
                'product': i[2],
                'type': i[3],
                'version': i[4],
                'build': i[5],
                'patch': i[6],
                'platform': i[7],
                'cpe23': i[8],
                'name': i[9],
                'cve': i[10],
                'cwe': i[11],
                'link': i[12],
            }
            result.append(record)
        return result
