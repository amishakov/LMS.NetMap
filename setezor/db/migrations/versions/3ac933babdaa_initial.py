"""initial

Revision ID: 3ac933babdaa
Revises: 
Create Date: 2025-02-11 12:59:59.785600

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = '3ac933babdaa'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('auth_log',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('login', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Имя пользователя'),
    sa.Column('event', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Событие'),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для логирования событий, связанных с авторизацией'
    )
    op.create_table('d_hardware_type',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование типа железки'),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения информации о типе железки на объекте'
    )
    op.create_table('d_network_type',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование типа сети'),
    sa.PrimaryKeyConstraint('id'),
    comment='Справочник типов сетей'
    )
    op.create_table('d_object_type',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Наименование типа устройства'),
    sa.PrimaryKeyConstraint('id'),
    comment='Справочник типов объектов'
    )
    op.create_table('d_vendor',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Наименование вендора'),
    sa.PrimaryKeyConstraint('id'),
    comment='Справочник вендоров'
    )
    op.create_table('invite_link',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('token_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Хеш от токена'),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Токен с пэйлодом'),
    sa.Column('used', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для ролей пользователя в проектах'
    )
    op.create_index(op.f('ix_invite_link_token_hash'), 'invite_link', ['token_hash'], unique=False)
    op.create_table('project',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Название проекта'),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Описание проекта'),
    sa.Column('search_vulns_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Токен для search vulns'),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения проектов'
    )
    op.create_table('role',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Название роли'),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для ролей пользователя в проектах'
    )
    op.create_table('user',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('login', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Логин пользователя'),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Хеш пароля'),
    sa.Column('is_superuser', sa.Boolean(), nullable=False, comment='Является ли суперпользователем'),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения пользователей'
    )
    op.create_table('acunetix',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование инстанса Acunetix'),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Адрес инстанса Acunetix'),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Токен доступа Acunetix'),
    sa.Column('offset', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Часовой пояс'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения окуней'
    )
    op.create_table('d_hardware',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование железки'),
    sa.Column('serial_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Серийный номер железки'),
    sa.Column('vendor_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор вендора'),
    sa.Column('hardware_type_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор типа железки'),
    sa.ForeignKeyConstraint(['hardware_type_id'], ['d_hardware_type.id'], ),
    sa.ForeignKeyConstraint(['vendor_id'], ['d_vendor.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения информации о железке'
    )
    op.create_table('d_software',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('vendor_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор вендора'),
    sa.Column('product', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Продукт вендора'),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Тип софта'),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Версия софта'),
    sa.Column('build', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Билд софта'),
    sa.Column('patch', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Патч софта'),
    sa.Column('platform', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Платформа софта'),
    sa.Column('cpe23', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Строка CPE23'),
    sa.ForeignKeyConstraint(['vendor_id'], ['d_vendor.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для ПО вендора'
    )
    op.create_table('scan',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование скана'),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Описание скана'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения сканов'
    )
    op.create_table('scope',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование скоупа'),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Описание скоупа'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения скопов'
    )
    op.create_table('user_project',
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор пользователя'),
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор проекта'),
    sa.Column('role_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор роли'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения связи пользователь-проект'
    )
    op.create_table('asn',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=True, comment='Номер ASN'),
    sa.Column('parent_asn_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['parent_asn_id'], ['asn.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения ASN номеров'
    )
    op.create_table('domain',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('domain', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Доменное имя'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения доменных имён'
    )
    op.create_index(op.f('ix_domain_domain'), 'domain', ['domain'], unique=False)
    op.create_table('email',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Адрес электронной почты'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения отношений почта-сотрудник'
    )
    op.create_table('object',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('object_type_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор типа объекта'),
    sa.Column('critical_level', sa.Integer(), nullable=False, comment='Уровень критичности объекта'),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Примечание к объекту'),
    sa.Column('agent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор агента'),
    sa.ForeignKeyConstraint(['object_type_id'], ['d_object_type.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения объектов'
    )
    op.create_table('organization',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения организаций'
    )
    op.create_table('phone',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Номер телефона'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения отношений телефон-сотрудник'
    )
    op.create_table('target',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('protocol', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Схема таргета'),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='IP таргета'),
    sa.Column('domain', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Domain таргета'),
    sa.Column('port', sa.Integer(), nullable=True, comment='Port таргета'),
    sa.Column('scope_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор скопа'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scope_id'], ['scope.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения таргетов скопа'
    )
    op.create_table('vulnerability',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование уязвимости'),
    sa.Column('cve', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='CVE уязвимости'),
    sa.Column('cwe', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='CWE уязвимости'),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Описание уязвимости'),
    sa.Column('details', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Детали уязвимости'),
    sa.Column('cvss', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='CVSS уязвимости'),
    sa.Column('cvss2', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='CVSS2 уязвимости'),
    sa.Column('cvss2_score', sa.Float(), nullable=True, comment='CVSS2 рейтинг уязвимости'),
    sa.Column('cvss3', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='CVSS3 уязвимости'),
    sa.Column('cvss3_score', sa.Float(), nullable=True, comment='CVSS3 рейтинг уязвимости'),
    sa.Column('cvss4', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='CVSS4 уязвимости'),
    sa.Column('cvss4_score', sa.Float(), nullable=True, comment='CVSS4 рейтинг уязвимости'),
    sa.Column('severity', sa.Integer(), nullable=True, comment='Тяжесть последствий'),
    sa.Column('request', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Запрос'),
    sa.Column('response', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Ответ'),
    sa.Column('impact', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Влияние'),
    sa.Column('affects_detail', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Параметр'),
    sa.Column('affects_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Адрес'),
    sa.Column('created_at_in_acunetix', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('recommendation', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Рекомендации по устранению уязвимости'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения уязвимостей'
    )
    op.create_table('agent',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Имя агента'),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Описание агента'),
    sa.Column('color', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Цвет агента на карте'),
    sa.Column('rest_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Адрес на котором запущен агент'),
    sa.Column('parent_agent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор агентского инстанса'),
    sa.Column('object_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment="Идентификатор Object'a, который является агентом"),
    sa.Column('secret_key', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='AES256 ключ агента'),
    sa.ForeignKeyConstraint(['object_id'], ['object.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения информации об агенте'
    )
    op.create_table('department',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование отдела'),
    sa.Column('organization_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор организации'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения отделов в организации'
    )
    op.create_table('mac',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('mac', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='MAC адрес'),
    sa.Column('object_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор объекта'),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Наименование интерфейса'),
    sa.Column('vendor_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор вендора'),
    sa.ForeignKeyConstraint(['object_id'], ['object.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['vendor_id'], ['d_vendor.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения MAC адресов'
    )
    op.create_index(op.f('ix_mac_mac'), 'mac', ['mac'], unique=False)
    op.create_table('vulnerability_link',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('link', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Ссылка на уязвимость'),
    sa.Column('vulnerability_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Ссылка на реализации уязвимости'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['vulnerability_id'], ['vulnerability.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения ссылок на уязвимости'
    )
    op.create_table('whois_domain',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('domain_crt', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Доменное имя из whois'),
    sa.Column('data', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Весь вывод результата'),
    sa.Column('org_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование организации'),
    sa.Column('AS', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Автономная система'),
    sa.Column('range_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Диапазон IP'),
    sa.Column('netmask', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Маска сети'),
    sa.Column('domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор domain'),
    sa.ForeignKeyConstraint(['domain_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для информации о регистраторе веб-ресурса по domain'
    )
    op.create_table('employee',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Имя'),
    sa.Column('middle_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Отчество'),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Фамилия'),
    sa.Column('position', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Должность'),
    sa.Column('manager_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор вышестоящего сотрудника'),
    sa.Column('department_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор департамента'),
    sa.ForeignKeyConstraint(['department_id'], ['department.id'], ),
    sa.ForeignKeyConstraint(['manager_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения сотрудников'
    )
    op.create_table('ip',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ip', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='IP адрес'),
    sa.Column('mac_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор MAC адреса'),
    sa.Column('network_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор сети'),
    sa.ForeignKeyConstraint(['mac_id'], ['mac.id'], ),
    sa.ForeignKeyConstraint(['network_id'], ['network.id'], use_alter=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения IP адресов'
    )
    op.create_index(op.f('ix_ip_ip'), 'ip', ['ip'], unique=False)
    op.create_table('route',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('agent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agent.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения роутов'
    )
    op.create_table('task',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Статус задачи'),
    sa.Column('params', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Аргументы задачи'),
    sa.Column('agent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.ForeignKeyConstraint(['agent_id'], ['agent.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения запускаемых задач'
    )
    op.create_table('dns_a',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_ip_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP адреса'),
    sa.Column('target_domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['target_domain_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['target_ip_id'], ['ip.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения DNS A записей домена'
    )
    op.create_table('dns_cname',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('record_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Значение DNS записи'),
    sa.Column('target_ip_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP адреса'),
    sa.Column('target_domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['target_domain_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['target_ip_id'], ['ip.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения DNS CNAME записей домена'
    )
    op.create_table('dns_mx',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_ip_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP адреса'),
    sa.Column('target_domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.Column('value_domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Приоритет'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['target_domain_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['target_ip_id'], ['ip.id'], ),
    sa.ForeignKeyConstraint(['value_domain_id'], ['domain.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения DNS MX записей домена'
    )
    op.create_table('dns_ns',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_ip_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP адреса'),
    sa.Column('target_domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.Column('value_domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['target_domain_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['target_ip_id'], ['ip.id'], ),
    sa.ForeignKeyConstraint(['value_domain_id'], ['domain.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения DNS NS записей домена'
    )
    op.create_table('dns_soa',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('target_ip_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP адреса'),
    sa.Column('target_domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.Column('domain_nname_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.Column('domain_rname_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.Column('serial', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Серийный номер'),
    sa.Column('refresh', sa.Integer(), nullable=False, comment='Обновление'),
    sa.Column('retry', sa.Integer(), nullable=False, comment='Попытка'),
    sa.Column('expire', sa.Integer(), nullable=False, comment='Истекает'),
    sa.Column('ttl', sa.Integer(), nullable=False, comment='TTL'),
    sa.ForeignKeyConstraint(['domain_nname_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['domain_rname_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['target_domain_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['target_ip_id'], ['ip.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения DNS SOA записей домена'
    )
    op.create_table('dns_txt',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('record_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Значение DNS записи'),
    sa.Column('target_ip_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP адреса'),
    sa.Column('target_domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор домена'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['target_domain_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['target_ip_id'], ['ip.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения DNS TXT записей домена'
    )
    op.create_table('employee_email',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employee_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор сотрудника'),
    sa.Column('email_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор почты'),
    sa.ForeignKeyConstraint(['email_id'], ['email.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения отношений почта-сотрудник'
    )
    op.create_table('employee_phone',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employee_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор сотрудника'),
    sa.Column('phone_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор телефона'),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['phone_id'], ['phone.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения отношений телефон-сотрудник'
    )
    op.create_table('network',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('start_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Начальный IP адрес'),
    sa.Column('end_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Конечный IP адрес'),
    sa.Column('mask', sa.Integer(), nullable=False, comment='Маска сети'),
    sa.Column('gateway_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор шлюза'),
    sa.Column('broadcast_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор широковещательного IP адреса'),
    sa.Column('network_type_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Тип сети'),
    sa.Column('asn_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор ASN'),
    sa.Column('parent_network_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор родительской сети'),
    sa.ForeignKeyConstraint(['asn_id'], ['asn.id'], ),
    sa.ForeignKeyConstraint(['broadcast_id'], ['ip.id'], ),
    sa.ForeignKeyConstraint(['gateway_id'], ['ip.id'], ),
    sa.ForeignKeyConstraint(['network_type_id'], ['d_network_type.id'], ),
    sa.ForeignKeyConstraint(['parent_network_id'], ['network.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения сетей'
    )
    op.create_table('object_employee',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('object_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор объекта'),
    sa.Column('employee_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор сотрудника'),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['object_id'], ['object.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения отношений сотрудник-арм'
    )
    op.create_table('port',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False, comment='Номер порта'),
    sa.Column('ip_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP'),
    sa.Column('protocol', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Протокол порта'),
    sa.Column('service_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Наименование сервиса порта'),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Состояние порта'),
    sa.Column('ttl', sa.Integer(), nullable=True, comment='TTL из nmap'),
    sa.Column('is_ssl', sa.Boolean(), nullable=True, comment='Есть ли SSL на порту'),
    sa.ForeignKeyConstraint(['ip_id'], ['ip.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для портов на конкретном IP'
    )
    op.create_index(op.f('ix_port_port'), 'port', ['port'], unique=False)
    op.create_table('route_list',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ip_id_from', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP'),
    sa.Column('ip_id_to', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор IP'),
    sa.Column('route_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор Route'),
    sa.ForeignKeyConstraint(['ip_id_from'], ['ip.id'], ),
    sa.ForeignKeyConstraint(['ip_id_to'], ['ip.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['route.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения позиции IP адреса в определённом роуте'
    )
    op.create_table('whois_ip',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('domain_crt', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Доменное имя из whois'),
    sa.Column('data', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Весь вывод результата'),
    sa.Column('org_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Наименование организации'),
    sa.Column('AS', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Автономная система'),
    sa.Column('range_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Диапазон IP'),
    sa.Column('netmask', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Маска сети'),
    sa.Column('ip_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор ip'),
    sa.ForeignKeyConstraint(['ip_id'], ['ip.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для информации о регистраторе веб-ресурса по ip'
    )
    op.create_table('l4_software',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('l4_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор порта'),
    sa.Column('software_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор ПО'),
    sa.ForeignKeyConstraint(['l4_id'], ['port.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['software_id'], ['d_software.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения ПО, которое крутится на ресурсе уровня 4'
    )
    op.create_table('l7',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('port_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор порта'),
    sa.Column('domain_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор домена'),
    sa.ForeignKeyConstraint(['domain_id'], ['domain.id'], ),
    sa.ForeignKeyConstraint(['port_id'], ['port.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения ресурсов уровня приложения'
    )
    op.create_table('authentication_credentials',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('l7_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор ресурса'),
    sa.Column('login', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Логин'),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Пароль'),
    sa.Column('need_auth', sa.Boolean(), nullable=False, comment='Нужна ли авторизация'),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Роль'),
    sa.Column('permissions', sa.Integer(), nullable=False, comment='Права'),
    sa.Column('parameters', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Параметры'),
    sa.ForeignKeyConstraint(['l7_id'], ['l7.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения данных авторизации на ресурс'
    )
    op.create_table('cert',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('data', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Полный вывод информации о сертификате'),
    sa.Column('not_before_date', sa.DateTime(), nullable=False, comment='Дата до'),
    sa.Column('not_after_date', sa.DateTime(), nullable=False, comment='Дата после'),
    sa.Column('is_expired', sa.Boolean(), nullable=False, comment='Протухший ли сертификат'),
    sa.Column('alt_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Альтернативное имя'),
    sa.Column('l7_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор ресурса'),
    sa.ForeignKeyConstraint(['l7_id'], ['l7.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения информации о SSL сертификате'
    )
    op.create_table('l4_software_vulnerability',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('l4_software_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор софта на порту'),
    sa.Column('vulnerability_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор уязвимости'),
    sa.Column('confirmed', sa.Boolean(), nullable=False, comment='Подтверждена ли уязвимость'),
    sa.ForeignKeyConstraint(['l4_software_id'], ['l4_software.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['vulnerability_id'], ['vulnerability.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения уязвимостей на софте, который крутится на порту'
    )
    op.create_table('l7_software',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('l7_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор веб-ресурса'),
    sa.Column('software_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор ПО'),
    sa.Column('parent_l7_software_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор родительского софта на ресурсе'),
    sa.ForeignKeyConstraint(['l7_id'], ['l7.id'], ),
    sa.ForeignKeyConstraint(['parent_l7_software_id'], ['l7_software.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['software_id'], ['d_software.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения ПО, которое крутится на ресурсе уровня приложения'
    )
    op.create_table('l7_software_vulnerability',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('l7_software_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор софта на ресурсе'),
    sa.Column('vulnerability_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор уязвимости'),
    sa.Column('confirmed', sa.Boolean(), nullable=False, comment='Подтверждена ли уязвимость'),
    sa.ForeignKeyConstraint(['l7_software_id'], ['l7_software.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.ForeignKeyConstraint(['vulnerability_id'], ['vulnerability.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения уязвимостей на софте, который крутится на ресурсе уровня приложения'
    )
    op.create_table('l7_software_vulnerability_screenshot',
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор проекта'),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Задача, породившая сущность'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата-время создания сущности'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата-время изменения сущности'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Дата-время удаления сущности'),
    sa.Column('scan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Идентификатор скана'),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('path', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Путь до скриншота'),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True, comment='Заметка для скриншота'),
    sa.Column('l7_software_vulnerability_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False, comment='Идентификатор софта на ресурсе'),
    sa.ForeignKeyConstraint(['l7_software_vulnerability_id'], ['l7_software_vulnerability.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='Таблица предназначена для хранения скриншотов уязвимостей на ресурсе с определённым софтом'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('l7_software_vulnerability_screenshot')
    op.drop_table('l7_software_vulnerability')
    op.drop_table('l7_software')
    op.drop_table('l4_software_vulnerability')
    op.drop_table('cert')
    op.drop_table('authentication_credentials')
    op.drop_table('l7')
    op.drop_table('l4_software')
    op.drop_table('whois_ip')
    op.drop_table('route_list')
    op.drop_index(op.f('ix_port_port'), table_name='port')
    op.drop_table('port')
    op.drop_table('object_employee')
    op.drop_table('network')
    op.drop_table('employee_phone')
    op.drop_table('employee_email')
    op.drop_table('dns_txt')
    op.drop_table('dns_soa')
    op.drop_table('dns_ns')
    op.drop_table('dns_mx')
    op.drop_table('dns_cname')
    op.drop_table('dns_a')
    op.drop_table('task')
    op.drop_table('route')
    op.drop_index(op.f('ix_ip_ip'), table_name='ip')
    op.drop_table('ip')
    op.drop_table('employee')
    op.drop_table('whois_domain')
    op.drop_table('vulnerability_link')
    op.drop_index(op.f('ix_mac_mac'), table_name='mac')
    op.drop_table('mac')
    op.drop_table('department')
    op.drop_table('agent')
    op.drop_table('vulnerability')
    op.drop_table('target')
    op.drop_table('phone')
    op.drop_table('organization')
    op.drop_table('object')
    op.drop_table('email')
    op.drop_index(op.f('ix_domain_domain'), table_name='domain')
    op.drop_table('domain')
    op.drop_table('asn')
    op.drop_table('user_project')
    op.drop_table('scope')
    op.drop_table('scan')
    op.drop_table('d_software')
    op.drop_table('d_hardware')
    op.drop_table('acunetix')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('project')
    op.drop_index(op.f('ix_invite_link_token_hash'), table_name='invite_link')
    op.drop_table('invite_link')
    op.drop_table('d_vendor')
    op.drop_table('d_object_type')
    op.drop_table('d_network_type')
    op.drop_table('d_hardware_type')
    op.drop_table('auth_log')
    # ### end Alembic commands ###
